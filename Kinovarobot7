classdef Kinovarobot7 < handle
    properties
        %> Robot model
        model;
        
        %>
        workspace = [-2, 2, -2, 2, -0.01, 4];   
    end
    
    methods%% Class for UR10 robot simulation
function self = Kinovarobot7()

%> Define the boundaries of the workspace

        
% robot = 
self.GetUR10Robot();
% robot = 
self.PlotAndColourRobot();%robot,workspace);
end

%% GetUR10Robot
% Given a name (optional), create and return a UR10 robot model
function GetUR10Robot(self)
%     if nargin < 1
        % Create a unique name (ms timestamp after 1ms pause)
        pause(0.001);
        name = ['LinearUR_10_',datestr(now,'yyyymmddTHHMMSSFFF')];
%     end

    L1 = Link('d', 0.2755 ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([-350 350]));
L2 = Link('d', 0       ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([47 313]));
L3 = Link('d', 0.41   ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([-350 350]));
L4 = Link('d', 0.0098 ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([30 330]));
L5 = Link('d', 0.3111  ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([-350 350]));
L6 = Link('d', 0       ,'a', 0       ,'alpha', pi/2  ,'qlim', deg2rad([65 295]));
L7 = Link('d', 0.2638 ,'a', 0       ,'alpha', pi    ,'qlim', deg2rad([-350 350]));

    self.model= SerialLink([L1, L2, L3, L4, L5, L6, L7],'name','Kinova robot spherical 7dof');
    
    % Rotate robot to the correct orientation
     self.model.base = self.model.base * transl(0,0.1,0.8);
end
%% PlotAndColourRobot
% Given a robot index, add the glyphs (vertices and faces) and
% colour them in if data is available 
function PlotAndColourRobot(self)%robot,workspace)
    for linkIndex = 0:self.model.n
        [ faceData, vertexData, plyData{linkIndex+1} ] = plyread(['Kinova',num2str(linkIndex),'.ply'],'tri'); %#ok<AGROW>
        self.model.faces{linkIndex+1} = faceData;
        self.model.points{linkIndex+1} = vertexData;
    end

    % Display robot
    self.model.plot3d(deg2rad([180 180 180 180 180 180 0]),'noarrow','workspace',self.workspace);
    if isempty(findobj(get(gca,'Children'),'Type','Light'))
        camlight
    end  
    self.model.delay = 0;

    % Try to correctly colour the arm (if colours are in ply file data)
    for linkIndex = 0:self.model.n
        handles = findobj('Tag', self.model.name);
        h = get(handles,'UserData');
        try 
            h.link(linkIndex+1).Children.FaceVertexCData = [plyData{linkIndex+1}.vertex.red ...
                                                          , plyData{linkIndex+1}.vertex.green ...
                                                          , plyData{linkIndex+1}.vertex.blue]/255;
            h.link(linkIndex+1).Children.FaceColor = 'interp';
        catch ME_1
            disp(ME_1);
            continue;
        end
    end
end        
    end
end
